# cd
# [CD:       move to repos            ]  cd $(locate '.git' | perl -nE '/^(.*)\.git$/ and say $1' | peco)

# one liner
[K8S:      switch context           ]  kubectx | peco | xargs kubectx
[K8S:      switch ns                ]  kubens | peco | xargs kubens
[K8S:      exec                     ]  kubectl get pods | tail -n +2 | peco | cut -d' ' -f1 | xargs -o -I{} kubectl exec -it {} bash
# [DOCKER: docker container bash      ]  docker ps | tail -n +2 | peco | cut -d' ' -f1 | xargs -o -I{} docker exec -it {} bash
# [DOCKER: docker container exited    ]  docker ps -a --filter 'status=exited' | tail -n +2 | peco | cut -d' ' -f1 | xargs docker commit -m 'exited' | cut -d: -f2 | xargs -o -I{} docker run --rm -it {} bash
# [DOCKER: docker-compose bash        ]  docker-compose ps | tail -n +3 | peco | cut -d' ' -f1 | xargs docker-compose ps -q | xargs -o -I{} docker exec -it {} bash
# [DOCKER: docker-compose bash exited ]  docker-compose ps --filter 'status=exited' | tail -n +3 | peco | cut -d' ' -f1 | xargs docker commit -m 'exited' | cut -d: -f2 | xargs -o -I{} docker run --rm -it {} bash
[DOCKER:   docker bash              ]  (test -f docker-compose.yml && (docker-compose ps | tail -n +3) || (docker ps | tail -n +2)) | peco | cut -d' ' -f1 | xargs -o -I{} docker exec -it {} bash
[DOCKER:   docker bash exited       ]  (test -f docker-compose.yml && (docker-compose ps --filter 'status=exited' | tail -n +3) || (docker ps -a --filter 'status=exited' | tail -n +2)) | peco | cut -d' ' -f1 | xargs docker commit -m 'exited' | cut -d: -f2 | xargs -o -I{} docker run --rm -it {} bash

# [REPORT:  report -> daily (-)       ]  find ~/works/gree/training-report -maxdepth 1 | sort -r | peco | xargs cat | ggrep -P '^h\d' | perl -pe 's/^h(\d). //; $_="  " x ($1-1) . "- $_"'
# [REPORT:  report -> daily (#)       ]  ls ~/works/gree/training-report/ | peco | xargs cat | ggrep -P '^h\d' | perl -pe 's/^h([12]). // and $_="#" x ($1+2) . " $_"; s/^\s*h[3-9]. // and $_ = "  " x ($1-2)."- ".$_'

# setting
[SETTING:  edit .zshrc              ]  e $(find ~/.dotfiles/zsh/src/ -type f | sort | peco)
[SETTING:  edit alias.zsh           ]  e ~/.dotfiles/zsh/src/*alias.zsh
[SETTING:  edit startup.zsh         ]  e ~/.dotfiles/zsh/src/*startup.zsh
[SETTING:  edit peco.zsh            ]  e ~/.dotfiles/zsh/src/*peco.zsh
[SETTING:  edit path.zsh            ]  e ~/.dotfiles/zsh/src/*path.zsh
[SETTING:  edit tools.zsh           ]  e ~/.dotfiles/zsh/src/*tools.zsh
[SETTING:  edit tools.zsh           ]  e ~/.dotfiles/zsh/src/*lab.zsh
[SETTING:  edit this snippets       ]  vim ~/.dotfiles/zsh/snippets.txt
[SETTING:  edit tmux snippets       ]  vim ~/.dotfiles/tmux/snippets.txt
[SETTING:  edit init.el             ]  vim ~/.emacs.d/init.el
[RELOAD :  reload .zshrc            ]  source ~/.zshrc
[SETTING:  build .zshrc.zwc         ]  ~/.dotfiles/zsh/make.pl && exec zsh

# etc
[ETC:      argocd re-login          ]  argocd login $(argocd context | sed -n '2,$p' | cut -c 4- | peco | awk '{print $1}') --grpc-web --sso
[ETC:      argocd kustomize diff    ]  argocd app list | peco --query "$(basename `pwd`)" --select-1 | awk '{print $1}' | KUBECTL_EXTERNAL_DIFF='colordiff -u' xargs -I{} argocd app diff {} --local .
[ETC:      open github              ]  open "$(git remote -v | grep '(fetch)$' | peco --select-1 | awk '{print $2}' | sed 's/\(ssh:\/\/\)*git@/https:\/\//')"
[ETC:      capslock to ctrl         ]  setxkbmap -option ctrl:nocaps
[ETC:      LANG -> JP               ]  export LANG=ja_JP.UTF-8
[ETC:      VNC                      ]  remmina
[ETC:      scanner                  ]  scangearmp2
[ETC:      tcpdump                  ]  sudo tcpdump -i lo0 -s0 -X src port 22 or dst port 22
[ETC:      network                  ]  sudo nethogs wlp2s0
[ETC:      PATH S-expression        ]  perl -wle 'do { print qq/(setenv "$_" "$ENV{$_}")/ if exists $ENV{$_} } for @ARGV' PATH  VIRTUAL_ENV
[ETC:      start xkeysnail          ]  xhost +SI:localuser:root && sudo xkeysnail .xkeysnail-config.py
[ETC:      k8s anchor dup check     ]  find . -name '*.yaml' | xargs ggrep -P '&[^\s&]+' -oH | sort | uniq -c

[GCP:      switch configuration     ]  gcloud config configurations activate $(gcloud config configurations list | tail -n +2 | peco | awk '{print $1}')
[GCP:      switch project           ]  gcloud config set project $(gcloud projects list | peco | awk '{print $1}')
[GCP:      switch gke cluster       ]  gcloud container clusters list | peco | while read NAME REGION _REST; do gcloud container clusters get-credentials $NAME --region $REGION; done


