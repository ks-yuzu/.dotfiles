# ========================================
#  CONFIG
# ========================================
run "tmux setenv -g TMUX_CONF_DIR ~/.dotfiles/tmux"

run 'tmux setenv -g CURRENT_OS "$($TMUX_CONF_DIR/scripts/get-os)"'
run 'tmux setenv -g COPY_COMMAND "$($TMUX_CONF_DIR/scripts/get-commands | grep copy  | cut -d" " -f2-)"'
run 'tmux setenv -g PASTE_COMMAND "$($TMUX_CONF_DIR/scripts/get-commands | grep paste | cut -d" " -f2-)"'


# ========================================
#  APPEARANCE
# ========================================
set -g default-terminal "screen-256color"
set -g automatic-rename on

# status bar
set -g status-fg white
set -g status-bg colour238
set -g status-interval 1

# status bar - left
set-option -g status-left "#[fg=colour255,bg=colour241] S#S(#(tmux ls | grep -n \"^$(tmux display -p '#S')\" | cut -d: -f1)/#(tmux list-sessions | wc -l)) #[default]"

# status bar - middle
set-window-option -g window-status-format '#(\
  _TMUX_IS_CURRENT_PANE=false\
  _TMUX_WINDOW_ID="#{window_id}"\
  _TMUX_WINDOW_NAME="#{window_name}"\
  _TMUX_PANE_PID="#{pane_pid}"\
  _TMUX_PANE_CURRENT_PATH="#{pane_current_path}"\
  _TMUX_PANE_CURRENT_COMMAND="#{pane_current_command}"\
  bash $TMUX_CONF_DIR/scripts/get-window-status-format\
)'
set-window-option -g window-status-current-format '#(\
  _TMUX_IS_CURRENT_PANE=true\
  _TMUX_WINDOW_ID="#{window_id}"\
  _TMUX_WINDOW_NAME="#{window_name}"\
  _TMUX_PANE_PID="#{pane_pid}"\
  _TMUX_PANE_CURRENT_PATH="#{pane_current_path}"\
  _TMUX_PANE_CURRENT_COMMAND="#{pane_current_command}"\
  bash $TMUX_CONF_DIR/scripts/get-window-status-format\
)'

# status bar - right
set-option -g status-right "#[fg=colour255,bg=colour241] %m/%d %H:%M:%S #[default]"


# ========================================
#  SCROLL
# ========================================
set-option -g history-limit 200000
setw -g mouse on

unbind -T copy-mode MouseDragEnd1Pane
bind -T copy-mode C-w send-keys -X copy-pipe "tmux copy-buffer"


# ========================================
#  KEY BINDINGS
# ========================================
# set-window-option -g mode-keys emacs
set -g mode-keys emacs

# prefix
set -g prefix C-t
bind C-t send-prefix
unbind C-b

# reload
bind r source-file ~/.tmux.conf \; display "Reloaded!"


# -- ウィンドウ操作 ----------------
bind -n M-p previous-window
bind -n M-n next-window
bind -n M-P swap-window -t -1 \; previous-window
bind -n M-N swap-window -t +1 \; next-window
bind -n M-1 select-window -t 1
bind -n M-2 select-window -t 2
bind -n M-3 select-window -t 3
bind -n M-4 select-window -t 4
bind -n M-5 select-window -t 5
bind -n M-6 select-window -t 6
bind -n M-7 select-window -t 7
bind -n M-8 select-window -t 8
bind -n M-9 select-window -t 9
bind -n M-0 select-window -t 10
bind -n M-! if 'tmux list-window | grep -q "^1:"' 'swap-window -t 1; select-window -t 1' 'move-window -t 1'
bind -n M-@ if 'tmux list-window | grep -q "^2:"' 'swap-window -t 2; select-window -t 2' 'move-window -t 2'
bind -n M-# if 'tmux list-window | grep -q "^3:"' 'swap-window -t 3; select-window -t 3' 'move-window -t 3'
bind -n M-$ if 'tmux list-window | grep -q "^4:"' 'swap-window -t 4; select-window -t 4' 'move-window -t 4'
bind -n M-% if 'tmux list-window | grep -q "^5:"' 'swap-window -t 5; select-window -t 5' 'move-window -t 5'
bind -n M-^ if 'tmux list-window | grep -q "^6:"' 'swap-window -t 6; select-window -t 6' 'move-window -t 6'
bind -n M-& if 'tmux list-window | grep -q "^7:"' 'swap-window -t 7; select-window -t 7' 'move-window -t 7'
bind -n M-* if 'tmux list-window | grep -q "^8:"' 'swap-window -t 8; select-window -t 8' 'move-window -t 8'
bind -n M-( if 'tmux list-window | grep -q "^9:"' 'swap-window -t 9; select-window -t 9' 'move-window -t 9'
bind -n M-) if 'tmux list-window | grep -q "^10:"' 'swap-window -t 10; select-window -t 10' 'move-window -t 10'


# -- ペイン操作 --------------------
# ペイン分割
bind | split-window -h
bind - split-window -v
unbind 1
unbind %
unbind '"'
bind 2 split-window -v
bind 3 split-window -h


# ペイン移動
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

# ペインのリサイズ
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# 全ペイン入力をトグル
bind ^a setw synchronize-panes \; display "synchronize-panes #{?pane_synchronized,on,off}"

# ペインのウィンドウ間移動
bind J command-prompt -p "join pane from:"  "join-pane -s '%%'"
bind S command-prompt -p "send pane to:"  "join-pane -t '%%'"

# チェック無しペーストは潰しておく (→ C-y を使用)
unbind ]


# -- クリップボード ----------------
bind -T copy-mode-emacs M-w send-keys -X copy-pipe "$COPY_COMMAND"
bind -T copy-mode-emacs C-w send-keys -X copy-pipe "$COPY_COMMAND"

bind -n C-y run "\
  [ $($PASTE_COMMAND | perl -0pe 's/\n*$//m' | grep -c '') -gt 1 ]\
    && (echo '[warn] multi-line paste!!\nuse C-t C-y to paste the following text forcibly\n-----'; $PASTE_COMMAND)\
    || (tmux set-buffer -- \"$($PASTE_COMMAND | tr -d \\\\r)\" && tmux paste-buffer)"
bind    C-y run 'tmux set-buffer -- "$($PASTE_COMMAND | tr -d \\r)" && tmux paste-buffer'


# prefix + t で 1 コマンド分の出力をコピー
unbind t
bind t\
  run '(tmux capture-pane -pS -32768\
         | extract-command-result.pl /tmp/tmux-n-copy-commands\
         | tee -a /tmp/command-result-copy-log\
         | $COPY_COMMAND;\
       rm -f /tmp/tmux-n-copy-commands) 2>&1' \;\
  display 'Copied!!'

# prefix <数字> prefix t で複数コマンドの出力をコピー
bind 1 run-shell 'echo 1 > /tmp/tmux-n-copy-commands'
bind 2 run-shell 'echo 2 > /tmp/tmux-n-copy-commands'
bind 3 run-shell 'echo 3 > /tmp/tmux-n-copy-commands'
bind 4 run-shell 'echo 4 > /tmp/tmux-n-copy-commands'
bind 5 run-shell 'echo 5 > /tmp/tmux-n-copy-commands'
bind 6 run-shell 'echo 6 > /tmp/tmux-n-copy-commands'
bind 7 run-shell 'echo 7 > /tmp/tmux-n-copy-commands'
bind 8 run-shell 'echo 8 > /tmp/tmux-n-copy-commands'
bind 9 run-shell 'echo 9 > /tmp/tmux-n-copy-commands'
bind 0 run-shell 'echo 10 > /tmp/tmux-n-copy-commands'


# -- スクリプト拡張 ----------------
bind -T copy-mode-emacs j   send -X copy-pipe '$TMUX_CONF_DIR/scripts/parse-json'
bind                    C-s run '$TMUX_CONF_DIR/scripts/snippet'
bind -T copy-mode-emacs C   send -X copy-pipe '$TMUX_CONF_DIR/scripts/stdin-vim'
bind                    C   run '$TMUX_CONF_DIR/scripts/capture-pane'


# ========================================
#  MISC
# ========================================
set -g base-index 1
set-option -g bell-action none
set-option -s escape-time 0
set-hook -g pane-exited "save-buffer /tmp/last-pane"



# ========================================
#  INCLUDE FILES
# ========================================
if -b '[ "$CURRENT_OS" = "mac" ]' "source $TMUX_CONF_DIR/.tmux.conf.mac"
